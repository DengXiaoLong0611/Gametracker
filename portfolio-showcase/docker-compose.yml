version: '3.8'

services:
  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: portfolio
      POSTGRES_PASSWORD: portfolio_password_2025
      POSTGRES_DB: portfolio_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio -d portfolio_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存 (可选)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 作品集应用
  app:
    build: .
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://portfolio:portfolio_password_2025@db:5432/portfolio_db
      REDIS_URL: redis://redis:6379/0
      
      # 应用配置
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: false
      SECRET_KEY: your-super-secret-key-change-this-in-production
      
      # 文件上传配置
      MAX_FILE_SIZE: 50MB
      ALLOWED_EXTENSIONS: jpg,jpeg,png,gif,webp,mp4,mov,avi,mp3,wav,pdf,doc,docx,txt
      
      # 第三方服务配置 (可选)
      # CLOUDINARY_URL: cloudinary://api_key:api_secret@cloud_name
      # SMTP_SERVER: smtp.gmail.com
      # SMTP_PORT: 587
      # SMTP_USER: your-email@gmail.com
      # SMTP_PASSWORD: your-app-password
    volumes:
      - ./static/uploads:/app/static/uploads
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理 (生产环境推荐)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    driver: bridge